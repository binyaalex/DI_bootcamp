-- Database: dvdrental

-- DROP DATABASE dvdrental;

-- CREATE DATABASE dvdrental
--     WITH 
--     OWNER = postgres
--     ENCODING = 'UTF8'
--     LC_COLLATE = 'Hebrew_Israel.1255'
--     LC_CTYPE = 'Hebrew_Israel.1255'
--     TABLESPACE = pg_default
--     CONNECTION LIMIT = -1;

-- Get a list of all film languages.
-- select * from language

-- Get a list of all films joined with their languages – select the following details : film title, description, and language name. Try your query with different joins:
-- Get all films, even if they don’t have languages.
-- Get all languages, even if there are no films in those languages

-- select title, description, name
-- from film f
-- left join language l
-- on f.language_id = l.language_id

-- select title, description, name
-- from film f
-- right join language l
-- on f.language_id = l.language_id

-- Create a new table called new_film with the following columns : id, name. Add some new films to the table.
-- create table new_film (
-- 	id  serial PRIMARY KEY,
-- 	name varchar(100)
-- )
-- insert into new_film (name)
-- values ('Shawshank Redemption'),
-- 		('Green mile');
-- select * from new_film

-- Create a new table called customer_review, which will contain film reviews that customers will make.
-- Think about the DELETE constraint: if a film is deleted, it’s review should be automatically deleted.
-- It should have the following columns:
-- review_id – a primary key, non null, auto-increment.
-- film_id – references the new_film table. The film that is being reviewed.
-- language_id – references the language table. What language the review is in.
-- title – the title of the review.
-- score – the rating of the review (1-10).
-- review_text – the text of the review. No limit on the length.
-- last_update – when the review was last updated.
-- create table customer_review (
-- 	review_id serial primary key not null,
-- 	film_id integer references new_film (id) on delete CASCADE,
-- 	language_id integer references language (language_id),
-- 	title varchar(100),
-- 	score integer,
-- 	review_text varchar,
-- 	last_update timestamp default current_timestamp
-- )
-- insert into customer_review (film_id, language_id, title, score, review_text)
-- values (
-- 	(select id from new_film where name = 'Green mile'),
-- 	(select language_id from language where name = 'English'),
-- 	'great moovie',
-- 	10,
-- 	'the best moovie ever'
-- )
-- select * from customer_review
--  insert into customer_review (film_id, language_id, title, score, review_text)
-- values (
-- 	(select id from new_film where name = 'Shawshank Redemption'),
-- 	(select language_id from language where name = 'English'),
-- 	'great moovie',
-- 	10,
-- 	'the best moovie ever'
-- )

-- Delete a film that has a review from the new_film table, what happens to the customer_review table?
-- delete from new_film
-- where name = 'Shawshank Redemption'

-- select * from film order by film_id
-- Use UPDATE to change the language of some films. Make sure that you use valid languages.
-- update film
-- set language_id = 2
-- where film_id between 1 and 10

-- Find out how many rentals are still outstanding (ie. have not been returned to the store yet).
-- SELECT count(*) FROM rental WHERE NOT (return_date IS NOT NULL);

-- Find the 30 most expensive movies which are outstanding (ie. have not been returned to the store yet)
-- SELECT * FROM rental r 
-- inner join inventory i
-- on r.inventory_id = i.inventory_id
-- inner join film f
-- on  f.film_id = i.film_id
-- where NOT (return_date IS NOT NULL)
-- order by rental_rate desc limit 30

-- Your friend is at the store, and decides to rent a movie. He knows he wants to see 4 movies, but he can’t remember their names. Can you help him find which movies he wants to rent?
-- The 1st film : The film is about a sumo wrestler, and one of the actors is Penelope Monroe.
-- SELECT * FROM actor a 
-- inner join film_actor fa
-- on a.actor_id = fa.actor_id
-- inner join film f
-- on  f.film_id = fa.film_id
-- where a.first_name = 'Penelope' and a.last_name = 'Monroe' and description ilike '%sumo%'

-- The 2nd film : A short documentary (less than 1 hour long), rated “R”.
-- SELECT * FROM category c 
-- inner join film_category fc
-- on c.category_id = fc.category_id
-- inner join film f
-- on  f.film_id = fc.film_id
-- where c.name ilike 'documentary' and rating = 'R' and length < 60

-- The 3rd film : A film that his friend Matthew Mahan rented. He paid over $4.00 for the rental, and he returned it between the 28th of July and the 1st of August, 2005.
-- SELECT * FROM customer c 
-- inner join rental r
-- on c.customer_id = r.customer_id
-- inner join inventory i
-- on i.inventory_id = r.inventory_id
-- inner join film f
-- on  f.film_id = i.film_id
-- where c.first_name = 'Matthew' and rental_rate >= 4 
-- and return_date between '2005-07-28' and '2005-08-01'

-- The 4th film : His friend Matthew Mahan watched this film, as well. It had the word “boat” in the title or description, and it looked like it was a very expensive DVD to replace.
-- SELECT * FROM customer c 
-- inner join rental r
-- on c.customer_id = r.customer_id
-- inner join inventory i
-- on i.inventory_id = r.inventory_id
-- inner join film f
-- on  f.film_id = i.film_id
-- where (title ilike '%boat%' or description ilike '%boat%') and c.first_name = 'Matthew'
-- order by replacement_cost limit 2
